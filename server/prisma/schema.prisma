generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model board_message {
  id                Int             @id(map: "board_message_pk") @default(autoincrement())
  message           String
  created_date      DateTime        @db.Date
  board_id          Int             @default(autoincrement())
  user_syndicate_id Int             @default(autoincrement())
  boards            boards          @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_board_message_board_id")
  user_syndicates   user_syndicates @relation(fields: [user_syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_board_message_user_syndicate_id")
}

model boards {
  id            Int             @id(map: "board_pk") @default(autoincrement())
  name          String          @db.VarChar(255)
  syndicate_id  Int             @default(autoincrement())
  board_message board_message[]
  syndicates    syndicates      @relation(fields: [syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_syndicate_board")
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model game_user_syndicates_ticket {
  id                 Int             @id(map: "game_user_syndicates_ticket_pk") @default(autoincrement())
  ticket_code        Int
  total_reward_value Float
  ticket_status_id   Int             @default(autoincrement())
  user_syndicate_id  Int             @default(autoincrement())
  game_id            Int             @default(autoincrement())
  games              games           @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_game_game_user_syndicates_ticket")
  ticket_status      ticket_status   @relation(fields: [ticket_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ticket_type_game_user_syndicates")
  user_syndicates    user_syndicates @relation(fields: [user_syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_syndicate_game_user_syndicates_ticket")
}

model games {
  id                          Int                           @id(map: "games_pk") @default(autoincrement())
  name                        String                        @db.VarChar(255)
  draw_date                   DateTime                      @db.Date
  reward                      Float
  required_ticket_number      String                        @db.VarChar(255)
  user_syndicate_id           Int                           @default(autoincrement())
  game_user_syndicates_ticket game_user_syndicates_ticket[]
  user_syndicates             user_syndicates               @relation(fields: [user_syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_games_user_syndicate_id")
}

model roles {
  id              Int               @id(map: "role_pk") @default(autoincrement())
  name            String            @db.VarChar(255)
  user_syndicates user_syndicates[]
}

model syndicates {
  id                     Int                      @id(map: "syndicate_pk") @default(autoincrement())
  created_date           DateTime                 @db.Date
  name                   String                   @db.VarChar(255)
  description            String?
  avatar                 String?                  @db.VarChar(255)
  owner_id               Int                      @default(autoincrement())
  boards                 boards[]
  users                  users                    @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_syndicate_user")
  user_syndicate_reviews user_syndicate_reviews[]
  user_syndicates        user_syndicates[]
}

model ticket_status {
  id                          Int                           @id(map: "ticket_type_pk") @default(autoincrement())
  name                        String                        @db.VarChar(255)
  game_user_syndicates_ticket game_user_syndicates_ticket[]
}

model user_syndicate_reviews {
  id           Int        @id(map: "user_syndicate_review_pk") @default(autoincrement())
  created_date DateTime   @db.Date
  title        String     @db.VarChar(255)
  content      String
  user_id      Int        @default(autoincrement())
  syndicate_id Int        @default(autoincrement())
  syndicates   syndicates @relation(fields: [syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_syndicate_reviews_syndicates")
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_syndicates_reviews")
}

model user_syndicates {
  id                          Int                           @id(map: "user_syndicate_pk") @default(autoincrement())
  start_date                  DateTime                      @db.Date
  user_id                     Int                           @default(autoincrement())
  syndicate_id                Int                           @default(autoincrement())
  role_id                     Int                           @default(autoincrement())
  board_message               board_message[]
  game_user_syndicates_ticket game_user_syndicates_ticket[]
  games                       games[]
  roles                       roles                         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_user_syndicates")
  syndicates                  syndicates                    @relation(fields: [syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_syndicates_syndicates")
  users                       users                         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_syndicates")
}

model users {
  id                     Int                      @id(map: "users_pk") @default(autoincrement())
  first_name             String                   @db.VarChar(255)
  last_name              String                   @db.VarChar(255)
  password               String                   @db.VarChar(255)
  email                  String                   @db.VarChar(255)
  syndicates             syndicates[]
  user_syndicate_reviews user_syndicate_reviews[]
  user_syndicates        user_syndicates[]
}
