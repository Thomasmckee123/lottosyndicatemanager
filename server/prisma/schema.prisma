generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model board_message {
  id           Int        @id(map: "board_message_pk") @default(autoincrement())
  message      String
  created_date DateTime   @db.Date
  board_id     Int
  user_game_id Int
  boards       boards     @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_board_message_board_id")
  user_games   user_games @relation(fields: [user_game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_board_message_user_game_id")
}

model boards {
  id            Int             @id(map: "board_pk") @default(autoincrement())
  name          String          @db.VarChar(255)
  game_id       Int             @default(autoincrement())
  board_message board_message[]
  games         games           @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_games_board")
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model game_types {
  id          Int      @id(map: "game_type_pk") @default(autoincrement())
  name        String   @db.VarChar(255)
  draw_date   DateTime @db.Date
  reward      Float
  image       String   @db.VarChar(255)
  ticket_cost Float
  games       games[]
}

model game_user_game_ticket {
  id                 Int           @id(map: "game_user_syndicates_ticket_pk") @default(autoincrement())
  ticket_code        String        @db.VarChar(255)
  total_reward_value Float
  ticket_status_id   Int
  game_id            Int
  games              games         @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_game_game_user_syndicates_ticket")
  ticket_status      ticket_status @relation(fields: [ticket_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ticket_type_game_user_syndicates")
}

model games {
  id                    Int                     @id(map: "games_pk") @default(autoincrement())
  maximum_players       Float
  treasury              Float
  syndicate_id          Int
  game_type_id          Int
  boards                boards[]
  game_user_game_ticket game_user_game_ticket[]
  game_types            game_types              @relation(fields: [game_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_games_games_types")
  syndicates            syndicates              @relation(fields: [syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_games_syndicate_id")
  user_games            user_games[]
}

model roles {
  id              Int               @id(map: "role_pk") @default(autoincrement())
  name            String            @db.VarChar(255)
  user_games      user_games[]
  user_syndicates user_syndicates[]
}

model syndicates {
  id                     Int                      @id(map: "syndicate_pk") @default(autoincrement())
  created_date           DateTime                 @db.Date
  name                   String                   @db.VarChar(255)
  description            String?
  avatar                 String?                  @db.VarChar(255)
  owner_id               Int
  games                  games[]
  users                  users                    @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_syndicate_user")
  user_syndicate_reviews user_syndicate_reviews[]
  user_syndicates        user_syndicates[]
}

model ticket_status {
  id                    Int                     @id(map: "ticket_type_pk") @default(autoincrement())
  name                  String                  @db.VarChar(255)
  game_user_game_ticket game_user_game_ticket[]
}

model user_games {
  id            Int             @id(map: "user_games_pk") @default(autoincrement())
  start_date    DateTime        @db.Date
  deposit       Float
  role_id       Int
  game_id       Int
  user_id       Int
  board_message board_message[]
  games         games           @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_games_game")
  roles         roles           @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_games_roles")
  users         users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_games")
}

model user_syndicate_reviews {
  id           Int        @id(map: "user_syndicate_review_pk") @default(autoincrement())
  created_date DateTime   @db.Date
  title        String     @db.VarChar(255)
  content      String
  user_id      Int
  syndicate_id Int
  syndicates   syndicates @relation(fields: [syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_syndicate_reviews_syndicates")
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_syndicates_reviews")
}

model user_syndicates {
  id           Int        @id(map: "user_syndicate_pk") @default(autoincrement())
  start_date   DateTime   @db.Date
  user_id      Int
  syndicate_id Int
  role_id      Int
  roles        roles      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_user_syndicates")
  syndicates   syndicates @relation(fields: [syndicate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_syndicates_syndicates")
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_syndicates")
}

model users {
  id                     Int                      @id(map: "users_pk") @default(autoincrement())
  first_name             String                   @db.VarChar(255)
  last_name              String                   @db.VarChar(255)
  image                  String                   @db.VarChar(255)
  password               String                   @db.VarChar(255)
  email                  String                   @db.VarChar(255)
  balance                Float
  user_type_id           Int
  syndicates             syndicates[]
  user_games             user_games[]
  user_syndicate_reviews user_syndicate_reviews[]
  user_syndicates        user_syndicates[]
  user_types             user_types               @relation(fields: [user_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_types")
}

model user_types {
  id    Int     @id(map: "user_types_pk") @default(autoincrement())
  name  String  @db.VarChar(255)
  users users[]
}
